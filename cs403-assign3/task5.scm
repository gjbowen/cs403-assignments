; Task 5
(define (sdisplay count s )
	(define (helper-non-flat f s location prev)
		(cond 
			((>= location (/ count 3))
				nil)
			((is? (car s) 'INTEGER)
				(print location "," (car s) ","            (f prev (car s)) ",")
				(helper-non-flat f (cadr s) (+ location 1) (f prev (car s)))
				)
			((and (is? (car (car (car s))) 'INTEGER) (symbol? (car (cdr (car (car s))))))
				(print location "," (car (car (car s))) ","                  (car (car (car s)))  ",")
				(helper-non-flat f (stream-cdr (car (car s))) (+ location 1) (car (car (car s)))) 
				)
			(else
				(print location "," (car (car (car s))) ","                 (car (car (car s)))  ",")
				(helper-non-flat f (car (cdr (car (car s)))) (+ location 1) (car (car (car s))) )
				)
			)	
		)
	(define (helper-flat s1 location prev)
		(cond 
			((>= location count)
				nil)
			(else
				(print  (car s1) ","  )
				(helper-flat (stream-cdr s1) (+ location 1) (car s1))
				)
			)
		)	

	(print "(")
	(if (is? (car s) 'INTEGER)
		(helper-flat s 0 0)
		(helper-non-flat (car s) (cdr s) 0 0)
		)
	(print "...)")
	)
(define (smush s f)
	(let ((x (cons-stream (cons s f) x)))
		(cons f x)
		)
	)

(define (main)
	(setPort (open (getElement ScamArgs 1) 'read))
	(define env this)
	(define (iter expr)
		(if (not (eof?))
			(begin
				(eval expr env)
				(iter (readExpr))
				)
			)
		)
	(iter (readExpr))
	)