(include "queue.scm")
(include "gates.scm")
(include "nand.scm")

(define the-agenda (make-agenda))

; (define (nand-gate a1 a2 output)
; 	(define (logical-nand a b) 
; 		(if (= (+ a b) 2) 0 1 )
; 		)
; 	(define (nand-action-procedure)
; 		(let ((new-value
; 			(logical-nand (get-signal a1) (get-signal a2))))
; 			(after-delay 
; 				6
; 				(lambda ()
; 					(set-signal! output new-value)
; 					)
; 				)
; 			)
; 		)
; 	(add-action! a1 nand-action-procedure)
; 	(add-action! a2 nand-action-procedure)
; 	'ok
; 	)


(define (inverter a output)
	(nand-gate a a output)
	)


(define (logical-not s)
  (cond ((= s 0) 1)
        ((= s 1) 0)
        (else (error "Invalid signal" s))))


(define (and-gate a b output)
	(let ((d (make-wire)))
		(nand-gate a b d)
		(nand-gate d d output)
		)
	'ok
	)

(define (or-gate a b output)
	(let ((d (make-wire))
		 (e (make-wire)))
		(nand-gate a a d)
		(nand-gate b b e)
		(nand-gate d e output)
		)
	)

(define (nor-gate a b output)
	(let ((d (make-wire))
		 (e (make-wire))
		 (f (make-wire)))
		(nand-gate a a d)
		(nand-gate b b e)
		(nand-gate d e f)
		(nand-gate f f output)
		)
	)

(define (xor-gate a b output)
	(let ((d (make-wire))
		 (e (make-wire))
		 (f (make-wire)))
		(nand-gate a b d)
		(nand-gate a d e)
		(nand-gate b d f)
		(nand-gate e f output)
		)
	)
;; ORIGINAL
(define (xnor-gate a b output)
	(let ((d (make-wire))
			(e (make-wire))
			(f (make-wire))
			(g (make-wire)))
		(nand-gate a b d)
		(nand-gate a d e)
		(nand-gate b d f)
		(nand-gate e f g)
		(nand-gate g g output)
		)
	)
; MOD
(define (xnor-gate a b output)
	(let ((d (make-wire))
			(e (make-wire))
			(f (make-wire))
			(g (make-wire)))
		(nand-gate a a d)
		(nand-gate b b e)
		(nand-gate d e f)
		(nand-gate a b g)
		(nand-gate f g output)
		)
	)

(define (main)
	(setPort (open (getElement ScamArgs 1) 'read))
	(define env this)
	(define (iter expr)
		(if (not (eof?))
			(begin
				(eval expr env)
				(iter (readExpr))
				)
			)
		)
	(iter (readExpr))
	)
